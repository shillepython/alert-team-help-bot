import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
import datetime

API_TOKEN = '7037813515:AAGOQxlALQBuNmOn3KxvM3r1q78Nd6D9Ews'

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# Allowed user IDs for the /setcard command
ALLOWED_USER_IDS = [6385046213, 516337879]

# Database initialization
async def init_db():
    async with aiosqlite.connect('cards.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS cards (
                id INTEGER PRIMARY KEY,
                card TEXT NOT NULL,
                card_name TEXT NOT NULL,
                bank_name TEXT NOT NULL
            )
        ''')
        await db.execute('''
           CREATE TABLE IF NOT EXISTS earnings (
               id INTEGER PRIMARY KEY AUTOINCREMENT,
               amount REAL NOT NULL,
               date TEXT NOT NULL
           )
       ''')
        await db.commit()

# Set bot commands
async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/card", description="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É"),
        types.BotCommand(command="/todayearnings", description="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è"),

        types.BotCommand(command="/setcard", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É (–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"),
        types.BotCommand(command="/addearn", description="–î–æ–±–∞–≤–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É (–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"),
        types.BotCommand(command="/removeearn", description="–û—Ç–Ω—è—Ç—å —Å—É–º–º—É –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ (–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)")
    ]
    await bot.set_my_commands(commands)

@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def welcome_new_member(message: types.Message):
    for new_member in message.new_chat_members:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{new_member.username}!")

@dp.message_handler(commands=['card'])
async def get_card(message: types.Message):
    async with aiosqlite.connect('cards.db') as db:
        async with db.execute('SELECT card_name, card, bank_name FROM cards ORDER BY id DESC LIMIT 1') as cursor:
            row = await cursor.fetchone()
            if row:
                card_name, card, bank_name = row
                await message.reply(f'''üí≥ –ö–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤

üá∑üá∫{card}
‚îú –û—Ç 100
‚îú {card_name}
‚îî {bank_name}

‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –≤–∞–º –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ–µ–π–∫, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É–∫–∞–∑–∞–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —á–µ–∫–∏ –≤ –ª—Å @papa_payments''',
                                    parse_mode=types.ParseMode.HTML)
            else:
                await message.reply("–ö–∞—Ä—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞")

# Command to set a new card
@dp.message_handler(commands=['setcard'])
async def set_card(message: types.Message):
    user_id = message.from_user.id
    if user_id in ALLOWED_USER_IDS:
        args = message.get_args().split(maxsplit=2)
        if len(args) == 3:
            card_name, card, bank_name = args
            async with aiosqlite.connect('cards.db') as db:
                await db.execute('INSERT INTO cards (card_name, card, bank_name) VALUES (?, ?, ?)', (card_name, card, bank_name))
                await db.commit()
            await message.reply(f"–ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {card_name} - {card} - {bank_name}")
        else:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ä—Ç—É –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É—è: /setcard <card_name> <card> <bank_name>")
    else:
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ —á—Ç–æ–±—ã —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")

@dp.message_handler(commands=['addearn'])
async def add_earn(message: types.Message):
    user_id = message.from_user.id
    if user_id in ALLOWED_USER_IDS:
        args = message.get_args().split()
        if len(args) == 1 and args[0].replace('.', '', 1).isdigit():
            amount = float(args[0])
            date = datetime.date.today().isoformat()
            async with aiosqlite.connect('cards.db') as db:
                await db.execute('INSERT INTO earnings (amount, date) VALUES (?, ?)', (amount, date))
                await db.commit()
            await message.reply(f"–°—É–º–º–∞ {amount} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞ {date}")
        else:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: /addearn <amount>")
    else:
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ —á—Ç–æ–±—ã —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")

@dp.message_handler(commands=['removeearn'])
async def remove_earn(message: types.Message):
    user_id = message.from_user.id
    if user_id in ALLOWED_USER_IDS:
        args = message.get_args().split()
        if len(args) == 1 and args[0].replace('.', '', 1).isdigit():
            amount = float(args[0])
            date = datetime.date.today().isoformat()
            async with aiosqlite.connect('cards.db') as db:
                await db.execute('INSERT INTO earnings (amount, date) VALUES (?, ?)', (-amount, date))
                await db.commit()
            await message.reply(f"–°—É–º–º–∞ {amount} –æ—Ç–Ω—è—Ç–∞ –∑–∞ {date}")
        else:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: /removeearn <amount>")
    else:
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ —á—Ç–æ–±—ã —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")

@dp.message_handler(commands=['todayearnings'])
async def today_earnings(message: types.Message):
    today = datetime.date.today().isoformat()
    async with aiosqlite.connect('cards.db') as db:
        async with db.execute('SELECT SUM(amount) FROM earnings WHERE date = ?', (today,)) as cursor:
            row = await cursor.fetchone()
            total = row[0] if row[0] is not None else 0
            await message.reply(f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total:.2f}")

if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    loop.run_until_complete(set_commands(bot))
    executor.start_polling(dp, skip_updates=True)
